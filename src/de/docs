## Flow Condition

Dieser Transformer dient als erstes Schild gegen opaque predicate Analyse. Um statische Analyse daran zu hindern zu erkennen, welcher Integer ein opaque predicate ist, benutzen wir diese Integer in bereits existierenden "if" statements. Das fügt nicht nur extra Security zur Software hinzu, sondern behindert zusätzlich deobfuscation und decompilation von vielen Tools.

Im Vergleich zum "Flow Exception Zransformer" ist das hier eine deutlich simplere Version welche sich nur um den Randfall kümmert.

## Konfiguration

```js
flowCondition {
    enabled: true
    exempt: []
}
```

## Beispiele

#### Unobfuscated
```java
public static void main(String[] args) {
    int number = callNumber();

    if (number == 1) {
        System.out.println("Hello world");
    }
    /*[...]*/
}
/*[...]*/
```

#### Obfuscated
```java
public static void main(String[] args) {
    /*[...]*/
    label1: {
        while (true) {
            if (n ^ 0x8AF8EF8F == 0xA88FFA) {
                break;
            }

            n = n ^ 0x28847D;
            int number = callNumber();

            label2: {
                if (number != 1)
                    break label1;

                if (n ^ 0xAA9F8FFD != 0x989F7AF)
                    break label2;

                System.out.println("Hello world");
                break label1;
            }

            throw new IllegalStateException();
        }
    }
    /*[...]*/
}
/*[...]*/
```
