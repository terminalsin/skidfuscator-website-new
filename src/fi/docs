
## Flow Range
Flow Exception Range Obfuscation ajoa käytetään kääntäjäoptimoinnissa lisäämään peittelyä ohjelman poikkeuskäsittelykoodiin.

Tämän tekniikan ideana on muuttaa ohjelman poikkeuskäsittelyrutiineja (kuten try-catch-lohkoja) siten, että ne sisältävät ylimääräisiä ohjausvirtaohjeita, jotka vaikeuttavat ohjelman loogisen virtauksen ymmärtämistä.

Esimerkiksi yksinkertainen try-catch-lohko voidaan muuttaa monimutkaisemmaksi rakenteeksi, joka sisältää sisäkkäisiä try-catch-lohkoja tai ylimääräisiä haarautumisohjeita. Tämä voi vaikeuttaa ranskalaista ymmärtämään ohjelman poikkeuskäsittelykäyttäytymistä ja mahdollisesti paljastamaan haavoittuvuuksia, joita voitaisiin käyttää hyväksi.

Tätä tekniikkaa käytetään usein yhdessä muiden hämärtymisen tekniikoiden kanssa, jotta voidaan tarjota ylimääräisiä suojakerroksia. On kuitenkin huomattava, että tarpeettoman monimutkaisuuden lisääminen poikkeustenkäsittelykoodiin voi myös vaikeuttaa ohjelman virheenkorjausta ja ylläpitoa, joten sitä tulisi käyttää kaikkialla.

## Konfiguroi

```js
flowRange {
     enabled: true
     exempt: []
}
```

## Esimerkkejä

#### Suojaamaton
```java
final String uwu = "UwU";
System.out.println(uwu);
```

#### Suojattu
```java
final String uwu = "UwU";

while (true) {
     label1: {
          try {
               if (this.a(0x92A8B44, n) >> 8 != 0x97F7F)
                    throw new IllegalReflectiveException();
               break label1;
          } catch (IllegalReflectiveException ex) {
               System.out.println(uwu);
          }
     }
}
```

#### IR Edustus
```
 Original flow:       Obfuscated Flow:

 ┌─────────┐            ┌─────────┐
 │ Block A │            │ Block A │
 └────┬────┘            └────┬────┘
      │                      │
 ┌────▼────┐         ┌───────▼────────┐
 │ Block B │         │ Random If Stmt │
 └─────────┘         └───────┬────────┘
                             │
                   ┌─────┐◄──┴───►┌─────┐
                   │ Yes │        │ No  │
                   └─────┘        └──┬──┘
                                     │
                               ┌─────▼─────┐
                               │ Exception │
                               └───────────┘

                      ┌─────────────┐
                      │  Exception  │
                      │   Catcher   │
                      └──────┬──────┘
                             │
                        ┌────▼────┐
                        │ Block B │
                        └─────────┘
```
