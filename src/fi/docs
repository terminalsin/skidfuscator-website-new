## Outliner

Outlining tarkoittaa prosessia, jossa koodia irrotetaan metodista ja sijoitetaan erilliseen, itsenäiseen metodiin. Tämä tehdään usein keinona parantaa koodin luettavuutta ja ylläpidettävyyttä, koska se voi helpottaa menetelmän toiminnan ymmärtämistä jakamalla se pienempiin, parempiin ja kohdistetumpiin koodin osiin.

Outlining voidaan käyttää myös eräänlaisena koodin hämärtämisen muotona, sillä se voi vaikeuttaa sitä, että joku, joka yrittää jäljittää tai ymmärtää koodia, näkee ohjelman yleisen virtauksen ja rakenteen. Jakamalla koodi pienemmiksi paloiksi ja erottamalla se eri menetelmiin, se voi olla paljon vaikeampi menettely, että joku ymmärtää suhteita virtaus eri osien välillä ja miten he sopivat yhteen suorittaa tietyn toiminnon.

![Kaavio Viipalointijärjestelmän selitys](https://i.imgur.com/2HMq0a4.png)

Fantastinen asia siinä on: se ei Ole *Teknisesti* Käännettävä! Voidakseen palata alkuperäiseen tilaan hyvä ääriviivat hämärtyminen, suojan poisto *täytyy tehdä inlining*, joka on heuristinen ja *ei* takaa, että ulostulo on aina semanttisesti oikein alkuperäisellä lähdekoodilla. Lisäksi tämä necessites deobfuscator mangle kanssa muuttujat ja muut eri muotoja herkkä bytecode manipulointi joka kaikki voi johtaa runko ja laskenta poikkeuksia.

Kaiken kaikkiaan obfuscation hahmottaminen on melko siisti :)

::: Varoitus
Ulompi muuntaja on vielä hyvin varhain kehitykseen. Koska Java todentaja toimii, kaikki skenaariot voidaan tarkastaa oikein, mikä voi aiheuttaa joitakin kokoamiseen liittyviä ongelmia. Ole hyvä ja käytä omalla vastuullasi, ja jos ilmenee ongelmia, ilmoita niistä.

Huomautus itse: vihaan pinon kehyksiä
:::

## Konfiguroi

```js
outliner {
     enabled: true
     exempt: []
}
```

## Esimerkkejä

#### Suojaamaton

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Suojattu
```java
public static void main(String[] args) {
    step1_AF8FZE8EF7Z89F();
    /*[...]*/
}

static void step1_AF8FZE8EF7Z89F() {
    int number = callNumber();
}


static int callNumber() {
    return 1;
}
```
