
## Plage de flux
Une passe d'obfuscation de la plage de flux est une technique utilisée dans l'optimisation du compilateur pour ajouter de l'obfuscation au code de gestion des exceptions d'un programme.

L'idée derrière cette technique est de modifier les routines de gestion des exceptions du programme (comme les blocs "try-catch") pour inclure des instructions de flux de contrôle supplémentaires qui rendent plus difficile la compréhension du flux logique du programme.

Par exemple, un simple bloc "try-catch" peut être transformé en une structure plus complexe qui comprend des blocs "try-catch" imbriqués ou des instructions de branchement supplémentaires. Cela peut rendre plus difficile pour un observateur de comprendre le comportement de gestion des exceptions du programme et potentiellement découvrir des vulnérabilités exploitables.

Cette technique est souvent utilisée en conjonction avec d'autres techniques d'obfuscation pour fournir des couches de protection supplémentaires. Cependant, il convient de noter que l'ajout d'une complexité inutile au code de gestion des exceptions peut également rendre plus difficile le débogage et la maintenance du programme, il convient donc de l'utiliser avec discernement.

## Configuration

```js
flowRange {
     enabled: true
     exempt: []
}
```

## Examples

#### Non obfusqué
```java
final String uwu = "UwU";
System.out.println(uwu);
```

#### Obfusqué
```java
final String uwu = "UwU";

while (true) {
     label1: {
          try {
               if (this.a(0x92A8B44, n) >> 8 != 0x97F7F)
                    throw new IllegalReflectiveException();
               break label1;
          } catch (IllegalReflectiveException ex) {
               System.out.println(uwu);
          }
     }
}
```

#### Représentation IR (Représentation intermédiaire)
```
 Flux original :       Flux obfusqué :

 ┌─────────┐            ┌─────────┐
 │ Block A │            │ Block A │
 └────┬────┘            └────┬────┘
      │                      │
 ┌────▼────┐         ┌───────▼────────┐
 │ Block B │         │ Random If Stmt │
 └─────────┘         └───────┬────────┘
                             │
                   ┌─────┐◄──┴───►┌─────┐
                   │ Yes │        │ No  │
                   └─────┘        └──┬──┘
                                     │
                               ┌─────▼─────┐
                               │ Exception │
                               └───────────┘

                      ┌─────────────┐
                      │  Exception  │
                      │   Catcher   │
                      └──────┬──────┘
                             │
                        ┌────▼────┐
                        │ Block B │
                        └─────────┘
```
