## Renommage de méthode (Method Renamer)

Le renommage de méthode cherche à renommer avec précision une méthode entière pour empêcher la conservation des noms des méthodes. Pour y parvenir, Skidfuscator crée des "groupes de méthodes" pour préserver efficacement la hiérarchie des méthodes. Par exemple, si `class B` hérite de `class A`, et `class A` implémente `methodA()`, tous les appels à `methodA()` pour les classes `class A` et `class B` devront être renommées.

## Configuration
Le renommage de méthode supporte actuellement un dictionnaire, `ALPHABETICAL`, aux côtés du dictionnaire traditionnel personnalisé, `CUSTOM`, basé sur l'entrée utilisateur. Dans ce scénario, les options suivantes sont disponibles :
- Profondeur (Depth) : Combien de littéraux seront utilisés par défaut (ex: 3 de profondeur mèneront à o0o0 pour le premier élément, ou 1 profondeur conduira à o0 pour le premier élément)
- Caractères (Chars) : Caractères à utiliser par le transformateur.

::: warning
Actuellement, le transformateur ne gère pas les caractères dupliqués et ne crée pas de noms de méthodes identiques. Par exemple, n'utilisez pas "o", "0" et "o0" car ce dernier est une combinaison des deux caractères précédents.
:::

```js
methodRenamer {
    enabled: false
    type: CUSTOM // or 'ALPHABETICAL'
    chars: [
        "K"
        "oO",
        "o0"
    ]
    depth: 3
}
```

## Examples

#### Non obfusqué

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Obfusqué
```java
public static void main(String[] args) {
    int number = o0k0k0Kk();
    /*[...]*/
}


static int o0k0k0Kk() {
    return 1;
}
```
