## Omlijning

Omlijning verwijst naar het proces om code uit een methode te halen en het in een afzonderlijke, zelfstandige methode te plaatsen. Dit wordt vaak gedaan als een manier om de leesbaarheid en de duurzaamheid van code te verbeteren omdat het makkelijker kan maken om te begrijpen wat een methode doet door het op te splitsen in kleinere, meer gerichte stukken code.

Omlijning kan ook worden gebruikt als een soort code obfuscation, omdat het het moeilijker kan maken voor iemand die probeert de ingenieur om te draaien of de code te begrijpen om de algehele stroom en structuur van het programma te zien. Door de code in kleinere stukjes te slopen en te scheiden in verschillende methodes, kan het een veel hardere procedure zijn voor iemand om de verhoudingen tussen de verschillende delen van de stroom te begrijpen en om samen een bepaalde functie uit te voeren.

![Uitlijning grafiek uitleg](https://i.imgur.com/2HMq0a4.png)

Het fantastische aan outlining is: Het is *technisch* niet omkeerbaar! Om terug te kunnen keren naar een originele staat van een goede omlijning obfuscator *moet een deobfuscator*uitvoeren die een heuristisch en *niet* garandeert dat de uitvoer altijd semantisch correct is met de originele broncode. Verder vereist dit de deobfuscator om te mangle met variabelen en andere verschillende vormen van gevoelige bytecode manipulatie die allemaal kan leiden tot frame- en rekening-uitzonderingen.

Over het geheel genomen is de obfuscatie best netjes :)

::: waarschuwing
De outliner transformator is nog erg vroeg in ontwikkeling. Als gevolg van hoe de verificateur Java werkt, kunnen niet alle scenario's correct worden geverifieerd, wat tot compilatieproblemen kan leiden. Gebruik alstublieft op eigen risico en als zich een probleem voordoet, rapporteer deze alstublieft.

Let op zelf: Ik haat de stack frames
:::

## Configuratie

```js
outliner {
     enabled: true
     exempt: []
}
```

## Voorbeelden

#### Unobfuscated

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Obfuscated
```java
public static void main(String[] args) {
    step1_AF8FZE8EF7Z89F();
    /*[...]*/
}

static void step1_AF8FZE8EF7Z89F() {
    int number = callNumber();
}


static int callNumber() {
    return 1;
}
```
