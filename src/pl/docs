## Zmiana nazwy metod

Funkcja zmiany nazwy metody ma na celu dokładne zmienienie nazwy całej metody w celu uniemożliwienia zachowania oryginalnej nazwy. Aby to osiągnąć, Skidfuscator tworzy "grupy metod", które pomagają skutecznie zachować hierarchię metod. Na przykład, jeśli `klasa B` rozszerza `klasę A`, a `klasa A` implementuje `metodęA()`, wszystkie wywołania `metodyA()` zarówno dla `klasy A`, jak i `klasy B` będą musiały zostać przemianowane.

## Konfiguracja
Zmiana nazwy metody obsługuje obecnie jeden słownik, `ALPHABETICAL`, wraz z tradycyjnym słownikiem niestandardowym, `CUSTOM`, w oparciu o podane informacje. W tym przypadku dostępnę są 2 opcje:
- Depth: Ile liter będzie domyślnie używanych (np. 3 głębokość doprowadzi do o0o0o0 dla pierwszego przedmiotu, lub 1 głębokość doprowadzi do o0 dla pierwszej pozycji)
- Chars: Znaki do użycia przez transformator.

::: warning
Obecnie transformator nie obsługuje zduplikowanych znaków i nieprawidłowo tworzy identyczne nazwy metod. Na przykład nie należy używać znaków "o", "0" i "o0", ponieważ ten ostatni jest kombinacją dwóch poprzednich znaków.
:::

```js
methodRenamer {
    enabled: false
    type: CUSTOM // or 'ALPHABETICAL'
    chars: [
        "K"
        "oO",
        "o0"
    ]
    depth: 3
}
```

## Przykłady

#### Brak zaciemnienia

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Zaciemniony kod
```java
public static void main(String[] args) {
    int number = o0k0k0Kk();
    /*[...]*/
}


static int o0k0k0Kk() {
    return 1;
}
```
