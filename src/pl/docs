
## Flow Range
Ta technika jest używana w optymalizacji kompilatora, aby zwiększyć zabezpieczenia w kodzie obsługi wyjątków programu poprzez wprowadzenie zaciemnienia.

Idea tej techniki polega na zmodyfikowaniu procedur obsługi wyjątków programu, takich jak bloki try-catch, poprzez dodanie dodatkowych instrukcji kontrolujących przepływ sterowania. Te zmiany mają na celu utrudnienie zrozumienia logicznego przepływu programu.

Na przykład, prosty blok try-catch może zostać przekształcony w bardziej skomplikowaną strukturę, która zawiera zagnieżdżone bloki try-catch lub dodatkowe instrukcje warunkowe, co sprawia, że kod staje się trudniejszy do zrozumienia. Takie przekształcenie utrudnia osobie analizującej zdekompilowany kod zrozumienie sposobu obsługi wyjątków w programie oraz potencjalne wykrycie luk, które mogą być wykorzystane.

Ta technika jest często używana w połączeniu z innymi metodami zaciemniania w celu dodania dodatkowych warstw ochrony kodu. Warto jednak pamiętać, że nadmierna złożoność w obszarze obsługi wyjątków może utrudniać proces debugowania i konserwacji programu, dlatego należy stosować tę technikę z umiarem.

## Konfiguracja

```js
flowRange {
     enabled: true
     exempt: []
}
```

## Przykłady

#### Brak zaciemnienia
```java
final String uwu = "UwU";
System.out.println(uwu);
```

#### Zaciemniony kod
```java
final String uwu = "UwU";

while (true) {
     label1: {
          try {
               if (this.a(0x92A8B44, n) >> 8 != 0x97F7F)
                    throw new IllegalReflectiveException();
               break label1;
          } catch (IllegalReflectiveException ex) {
               System.out.println(uwu);
          }
     }
}
```

#### IR Representation
```
 Original flow:       Obfuscated Flow:

 ┌─────────┐            ┌─────────┐
 │ Block A │            │ Block A │
 └────┬────┘            └────┬────┘
      │                      │
 ┌────▼────┐         ┌───────▼────────┐
 │ Block B │         │ Random If Stmt │
 └─────────┘         └───────┬────────┘
                             │
                   ┌─────┐◄──┴───►┌─────┐
                   │ Yes │        │ No  │
                   └─────┘        └──┬──┘
                                     │
                               ┌─────▼─────┐
                               │ Exception │
                               └───────────┘

                      ┌─────────────┐
                      │  Exception  │
                      │   Catcher   │
                      └──────┬──────┘
                             │
                        ┌────▼────┐
                        │ Block B │
                        └─────────┘
```
