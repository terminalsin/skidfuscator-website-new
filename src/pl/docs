## Outliner

Konturowanie odnosi się do procesu wyciągania pewnej części kodu z metody i przenoszenia go do osobnej, samodzielnej metody. Konturowanie jest często stosowane w celu poprawy czytelności i łatwości konserwacji kodu poprzez podzielenie dużej metody na mniejsze, bardziej skoncentrowane fragmenty. Dzięki temu można łatwiej zrozumieć, co dokładnie wykonuje dana metoda, ponieważ jej logika jest podzielona na bardziej zrozumiałe części.

Konturowanie może być również używane jako sposób na utrudnienie analizy kodu, ponieważ może uniemożliwić osobie próbującej zrozumieć program zobaczenie ogólnej struktury. Rozbijając kod na mniejsze fragmenty i dzieląc go na różne metody, może być trudniej dla kogoś zrozumieć, jak poszczególne części kodu ze sobą współgrają i jak pasują do siebie, aby osiągnąć określoną funkcjonalność.

![Outlining graph explanation](https://i.imgur.com/2HMq0a4.png)

Fantastyczną rzeczą w outliningu jest to, że nie jest on *technicznie* odwracalny! Aby odzyskać pierwotny, czytelny kod zaciemnionego kodu, deobfuscator musi dokonać procesu *inliningu*. Dodatkowo, proces deobfuskacji wymaga manipulacji zmiennymi oraz innymi delikatnymi operacjami na kodzie bajtowym, co może prowadzić do błędów i nieprawidłowego działania.

Ogólnie rzecz biorąc, outlining jest całkiem fajny :)

::: warning
Transformer jest wciąż na bardzo wczesnym etapie rozwoju. Ze względu na sposób działania weryfikatora Java, nie wszystkie scenariusze mogą zostać poprawnie zweryfikowane, co może prowadzić do pewnych problemów z kompilacją. Używaj na własne ryzyko, a jeśli pojawią się jakiekolwiek problemy, zgłoś je.

Note to self: I hate stack frames
:::

## Konfiguracja

```js
outliner {
     enabled: true
     exempt: []
}
```

## Przykłady

#### Brak zaciemnienia

```java
public static void main(String[] args) {
    int number = callNumber();
    /*[...]*/
}

static int callNumber() {
    return 1;
}
```

#### Zaciemniony kod
```java
public static void main(String[] args) {
    step1_AF8FZE8EF7Z89F();
    /*[...]*/
}

static void step1_AF8FZE8EF7Z89F() {
    int number = callNumber();
}


static int callNumber() {
    return 1;
}
```
