## Flow Condition

Ten transformer pełni rolę pierwszej linii obrony przed niepożądaną analizą kodu. Aby utrudnić statyczną analizę wykrywającą, która liczba całkowita jest ukrytym predykatem, dodajemy tę konkretną liczbę całkowitą jako dodatkowy warunek do istniejących instrukcji warunkowych (if). To nie tylko zwiększa bezpieczeństwo oprogramowania, ale również utrudnia proces deobfuskacji i dekompilacji.

W porównaniu do transformatora Flow Exception, ta metoda jest znacznie prostsza i mniej skomplikowana.

## Konfiguracja

```js
flowCondition {
    enabled: true
    exempt: []
}
```

## Przykłady

#### Brak zaciemnienia
```java
public static void main(String[] args) {
    int number = callNumber();

    if (number == 1) {
        System.out.println("Hello world");
    }
    /*[...]*/
}
/*[...]*/
```

#### Zaciemniony kod
```java
public static void main(String[] args) {
    /*[...]*/
    label1: {
        while (true) {
            if (n ^ 0x8AF8EF8F == 0xA88FFA) {
                break;
            }

            n = n ^ 0x28847D;
            int number = callNumber();

            label2: {
                if (number != 1)
                    break label1;

                if (n ^ 0xAA9F8FFD != 0x989F7AF)
                    break label2;

                System.out.println("Hello world");
                break label1;
            }

            throw new IllegalStateException();
        }
    }
    /*[...]*/
}
/*[...]*/
```
