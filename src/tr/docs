
## Akış Aralığı (Flow Range)
Akış istisna aralığı gizleme geçişi, bir programın istisna işleme koduna gizleme eklemek için derleyici optimizasyonunda kullanılan bir tekniktir.

Bu tekniğin arkasındaki fikir, programın istisna işleme rutinlerini (try-catch blokları gibi), programın mantıksal akışını anlamayı zorlaştıran ek kontrol akışı talimatları içerecek şekilde değiştirmektir.

Örneğin, basit bir try-catch bloğu, iç içe geçmiş try-catch blokları veya ek dallanma talimatları içeren daha karmaşık bir yapıya dönüştürülebilir. Bu, bir gözlemcinin programın istisna işleme davranışını anlamasını ve potansiyel olarak istismar edilebilecek güvenlik açıklarını ortaya çıkarmasını daha zor hale getirebilir.

Bu teknik genellikle ek koruma katmanları sağlamak için diğer gizleme teknikleriyle birlikte kullanılır. Ancak, istisna işleme koduna gereksiz karmaşıklık eklemenin de programın hata ayıklama ve bakımını zorlaştırabileceği unutulmamalıdır, bu nedenle mantıklı bir şekilde kullanılmalıdır.

## Yapılandırma Ayarı

```js
flowRange {
     enabled: true
     exempt: []
}
```

## Örnekler

#### Gizlenmemiş Kod
```java
final String uwu = "UwU";
System.out.println(uwu);
```

#### Gizlenmiş Kod
```java
final String uwu = "UwU";

while (true) {
     label1: {
          try {
               if (this.a(0x92A8B44, n) >> 8 != 0x97F7F)
                    throw new IllegalReflectiveException();
               break label1;
          } catch (IllegalReflectiveException ex) {
               System.out.println(uwu);
          }
     }
}
```

#### IR Temsili (IR Representation)
```
 Original flow:       Obfuscated Flow:

 ┌─────────┐            ┌─────────┐
 │ Block A │            │ Block A │
 └────┬────┘            └────┬────┘
      │                      │
 ┌────▼────┐         ┌───────▼────────┐
 │ Block B │         │ Random If Stmt │
 └─────────┘         └───────┬────────┘
                             │
                   ┌─────┐◄──┴───►┌─────┐
                   │ Yes │        │ No  │
                   └─────┘        └──┬──┘
                                     │
                               ┌─────▼─────┐
                               │ Exception │
                               └───────────┘

                      ┌─────────────┐
                      │  Exception  │
                      │   Catcher   │
                      └──────┬──────┘
                             │
                        ┌────▼────┐
                        │ Block B │
                        └─────────┘
```
